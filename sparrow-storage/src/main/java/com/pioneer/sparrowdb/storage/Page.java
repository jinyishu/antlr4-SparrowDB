package com.pioneer.sparrowdb.storage;

import com.pioneer.sparrowdb.storage.exception.StorageException;

public interface Page {

    /**
     * @return the page id
     */
    PageID getPageID();

    /**
     * 序列化page数据
     */
    byte[] serialize() throws StorageException;

    /**
     * 反序列化pageData
     */
    void deserialize(byte[] pageData) throws StorageException;

    /**
     * Generates a byte array representing the contents of this page.
     * Used to serialize this page to disk.
     * <p>
     * The invariant here is that it should be possible to pass the byte array
     * generated by getPageData to the Page constructor and have it produce
     * an identical Page object.
     *
     * @return A byte array correspond to the bytes of this page.
     */
    byte[] getPageData();

    /**
     * Returns true if the page's data has been changed in memory; false
     * otherwise.
     *
     * @return true if the page's data has been changed in memory
     */
    boolean isDirty();

}
